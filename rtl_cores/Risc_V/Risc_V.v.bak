module Risc_V(
	 input reset,clock,
   
    output reg [31:0] ALU_result 
);

	 reg   [6:0] op,funct7;
    reg   [2:0] funct3;
    reg         funct7_b5,zero,cout,overflow,sign;
	 
    reg         [1:0] ALUSrcA, ALUSrcB, ImmSrc, ResultSrc;
    reg         [2:0] ALUControl;
    reg               AdrSrc;
    reg               PCWrite, MemWrite, RegWrite, IRWrite;
assign funct7 = {2'b00 , funct7_b5 ,4'b0000};

Control_unit  ctrl(
    .clk(clock), .reset(reset),
	
	 .zero(zero), .overflow(overflow), .sign(sign), .cout(cout),
    .funct3(funct3),
    .op(op), .funct7(funct7),
    
	 .PCWrite(PCWrite),.Mem_Write(MemWrite), .IRWrite(IRWrite), .RegWrite(RegWrite), .AdrSrc(AdrSrc),
    .ALUSrcA(ALUSrcA), .ALUSrcB(ALUSrcB),  .ResultSrc(ResultSrc),
    . ALUControl(ALUControl) , .ImmSrc(ImmSrc) ,
	   .size () //AA
);

datapath data_path( .OP(op), .funct3(funct3), .funct7(funct7_b5), .Zero(zero), .cout(cout), .overflow(overflow), .sign(sign),
                     .RESET(reset), .CLK(clock), .ALUSrcA(ALUSrcA), .ALUSrcB(ALUSrcB), .ImmSrc(ImmSrc), 
							.ResultSrc(ResultSrc), .ALUControl(ALUControl), .AdrSrc(AdrSrc), .PCWrite(PCWrite), 
							.MemWrite(MemWrite), .RegWrite(RegWrite), .IRWrite(IRWrite));
 


endmodule