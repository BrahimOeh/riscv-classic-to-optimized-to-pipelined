module alu (
    input  logic [31:0] src1,
    input  logic [31:0] src2,
    input  logic [3:0]  aluc,
    output logic [31:0] out,
    output logic        zero,
    output logic        cout,
    output logic        overflow,
    output logic        sign
);

    always_comb begin
        
        out      = 32'b0;
        cout     = 1'b0;
        overflow = 1'b0;

        case (aluc)
            4'b0000: begin // ADD
                {cout, out} = {1'b0, src1} + {1'b0, src2};
            end
            4'b0001: begin // SUB
                {cout, out} = {1'b0, src1} + {1'b0, ~src2} + 1;
            end
            4'b0010: begin // SLL
                out = src1 << src2[4:0];
            end
            4'b0011: begin // SLT (signed)
                out = ($signed(src1) < $signed(src2)) ? 32'd1 : 32'd0;
            end
            4'b0100: begin // XOR
                out = src1 ^ src2;
            end
            4'b0101: begin // SLTU (unsigned)
                out = ($unsigned(src1) < $unsigned(src2)) ? 32'd1 : 32'd0;
            end
            4'b0110: begin // SRL
                out = src1 >> src2[4:0];
            end
            4'b0111: begin // SRA (signed)
                out = $signed(src1) >>> $unsigned(src2[4:0]);
            end
            4'b1000: begin // OR
                out = src1 | src2;
            end
            4'b1001: begin // AND
                out = src1 & src2;
            end
            4'b1010: begin // MPY (low 32 bits)
                out = src1 * src2;
            end
            4'b1011: begin // MPYH (high 32 bits of 64-bit result)
                out = (src1 * src2) >> 32;
            end
            4'b1100: begin // DIV (unsigned)
                out = (src2 != 0) ? $unsigned(src1) / $unsigned(src2) : 32'd0;
            end
            4'b1101: begin // MODULO (unsigned)
                out = (src2 != 0) ? $unsigned(src1) % $unsigned(src2) : 32'd0;
            end
            default: begin
                out = 32'd0;
            end
        endcase

        // Mise Ã  jour des flags
        zero     = (out == 0);
        sign     = out[31];
        overflow = (~(src1[31] ^ src2[31]) & (src1[31] ^ out[31]) & (aluc == 4'b0000 || aluc == 4'b0001));
    end

endmodule